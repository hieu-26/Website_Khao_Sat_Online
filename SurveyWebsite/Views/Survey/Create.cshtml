@model SurveyWebsite.Models.ViewModels.SurveyCreateViewModel

@{
    ViewData["Title"] = Model.SurveyId == 0 ? "Tạo Khảo Sát Mới" : "Chỉnh Sửa Khảo Sát";
}

<div class="container mt-4">
    <h2 class="mb-4">@ViewData["Title"]</h2>

    <form asp-action="@(Model.SurveyId == 0 ? "Create" : "Edit")" method="post" id="surveyForm">
        @if (Model.SurveyId != 0)
        {
            <input type="hidden" asp-for="SurveyId" />
        }

        <!-- Thông tin khảo sát -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white">
                <strong>Thông tin khảo sát</strong>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label asp-for="Title" class="form-label">Tiêu đề *</label>
                    <input asp-for="Title" class="form-control" required />
                    <span class="text-danger field-validation-valid" data-valmsg-for="Title" data-valmsg-replace="true"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Mô tả</label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                </div>
            </div>
        </div>

        <!-- Cài đặt khảo sát -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white">
                <strong>Cài đặt khảo sát</strong>
            </div>
            <div class="card-body">
                <div class="form-check form-switch mb-3">
                    <input type="checkbox" asp-for="IsPublic" class="form-check-input" id="isPublicCheckbox" />
                    <label class="form-check-label" asp-for="IsPublic">Công khai khảo sát</label>
                </div>

                <div id="allowedUsersSection" class="mb-3" style="display: none;">
                    <label class="form-label">Chọn người được phép truy cập:</label>
                    <select asp-for="AllowedUserIds" class="form-select" multiple size="5" id="allowedUsersSelect">
                        @foreach (var user in Model.AllUsers)
                        {
                            <option value="@user.UserId" selected="@(Model.AllowedUserIds?.Contains(user.UserId) ?? false)">
                                @user.FullName (@user.Username)
                            </option>
                        }
                    </select>
                    <span class="text-danger" id="allowedUsersError"></span>
                </div>

                <div class="form-check form-switch mb-3">
                    <input type="checkbox" asp-for="AllowMultipleResponses" class="form-check-input" />
                    <label class="form-check-label" asp-for="AllowMultipleResponses">Cho phép trả lời nhiều lần</label>
                </div>

                <div class="form-check form-switch mb-3">
                    <input type="checkbox" asp-for="RequireLogin" class="form-check-input" />
                    <label class="form-check-label" asp-for="RequireLogin">Yêu cầu đăng nhập</label>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="StartDate" class="form-label">Ngày bắt đầu</label>
                        <input asp-for="StartDate" class="form-control" type="datetime-local" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="EndDate" class="form-label">Ngày kết thúc</label>
                        <input asp-for="EndDate" class="form-control" type="datetime-local" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Câu hỏi -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <strong>Câu hỏi khảo sát</strong>
                <button type="button" class="btn btn-sm btn-light" onclick="addQuestion()">
                    <i class="fas fa-plus"></i> Thêm câu hỏi
                </button>
            </div>
            <div class="card-body" id="questionsContainer">
                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    <div class="card mb-3 question-item">
                        <div class="card-body">
                            <input type="hidden" name="Questions[@i].QuestionId" value="@Model.Questions[i].QuestionId" />
                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-sm btn-danger" onclick="removeQuestion(this)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Nội dung câu hỏi *</label>
                                <input name="Questions[@i].QuestionText" class="form-control question-text" value="@Model.Questions[i].QuestionText" required />
                                <span class="text-danger question-text-error"></span>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Loại câu hỏi</label>
                                <select name="Questions[@i].QuestionType" class="form-select question-type"
                                        onchange="handleQuestionTypeChange(@i, this)">
                                    <option value="Text" selected="@(Model.Questions[i].QuestionType == "Text")">Tự luận</option>
                                    <option value="SingleChoice" selected="@(Model.Questions[i].QuestionType == "SingleChoice")">Trắc nghiệm</option>
                                    <option value="MultipleChoice" selected="@(Model.Questions[i].QuestionType == "MultipleChoice")">Checkbox (nhiều lựa chọn)</option>
                                </select>
                            </div>
                            <div class="form-check mb-3">
                                <input type="checkbox" name="Questions[@i].IsRequired" class="form-check-input" @(Model.Questions[i].IsRequired ? "checked" : "") />
                                <label class="form-check-label">Câu hỏi bắt buộc</label>
                            </div>
                            <div id="options-@i" class="options-container" style="display:@(Model.Questions[i].QuestionType == "Text" ? "none" : "block")">
                                @for (int j = 0; j < Model.Questions[i].Options.Count; j++)
                                {
                                    <div class="input-group mb-2 option-item">
                                        <input type="hidden" name="Questions[@i].Options[@j].OptionId" value="@Model.Questions[i].Options[j].OptionId" />
                                        <input type="text" name="Questions[@i].Options[@j].OptionText" class="form-control option-text" placeholder="Nhập tùy chọn..." value="@Model.Questions[i].Options[j].OptionText" />
                                        <button type="button" class="btn btn-outline-danger" onclick="removeOption(this)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary mt-2 btn-add-option" onclick="addOption(@i)" id="add-option-btn-@i" style="display:@(Model.Questions[i].QuestionType == "Text" ? "none" : "inline-block")">
                                <i class="fas fa-plus"></i> Thêm lựa chọn
                            </button>
                            <span class="text-danger options-error"></span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Nút hành động -->
        <div class="d-flex justify-content-end">
            <a asp-action="MySurveys" class="btn btn-secondary me-2">Hủy</a>
            <button type="submit" class="btn btn-primary">Lưu khảo sát</button>
        </div>
    </form>
</div>

@section Scripts {
    <script src="~/js/surveyValidation.js"></script>
    <script>
        function updateQuestionIndexes() {
            const questionItems = document.querySelectorAll(".question-item");
            questionItems.forEach((qItem, i) => {
                qItem.querySelectorAll("input, select, textarea").forEach(el => {
                    if (el.name.includes("Questions[")) {
                        el.name = el.name.replace(/Questions\[\d+\]/g, `Questions[${i}]`);
                    }
                });
                const optionsContainer = qItem.querySelector(".options-container");
                optionsContainer.id = `options-${i}`;
                const addBtn = qItem.querySelector(".btn-add-option");
                addBtn.setAttribute("onclick", `addOption(${i})`);
                addBtn.id = `add-option-btn-${i}`;
                const select = qItem.querySelector("select[name*='QuestionType']");
                select.setAttribute("onchange", `handleQuestionTypeChange(${i}, this)`);
                updateOptionIndexes(i);
            });
        }

        function updateOptionIndexes(qIndex) {
            const optionContainer = document.getElementById(`options-${qIndex}`);
            const optionItems = optionContainer.querySelectorAll(".option-item");
            optionItems.forEach((optItem, j) => {
                const inputs = optItem.querySelectorAll("input");
                if (inputs.length === 2) {
                    inputs[0].name = `Questions[${qIndex}].Options[${j}].OptionId`;
                    inputs[1].name = `Questions[${qIndex}].Options[${j}].OptionText`;
                }
            });
        }

        function addQuestion() {
            const container = document.getElementById("questionsContainer");
            const questionCount = document.querySelectorAll(".question-item").length;

            const html = `
            <div class="card mb-3 question-item">
                <div class="card-body">
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeQuestion(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    <input type="hidden" name="Questions[${questionCount}].QuestionId" value="0" />
                    <div class="mb-3">
                        <label class="form-label">Nội dung câu hỏi *</label>
                        <input name="Questions[${questionCount}].QuestionText" class="form-control question-text" required />
                        <span class="text-danger question-text-error"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Loại câu hỏi</label>
                        <select name="Questions[${questionCount}].QuestionType" class="form-select question-type"
                                onchange="handleQuestionTypeChange(${questionCount}, this)">
                            <option value="Text">Tự luận</option>
                            <option value="SingleChoice">Trắc nghiệm</option>
                            <option value="MultipleChoice">Checkbox (nhiều lựa chọn)</option>
                        </select>
                    </div>
                    <div class="form-check mb-3">
                        <input type="checkbox" name="Questions[${questionCount}].IsRequired" class="form-check-input" />
                        <label class="form-check-label">Câu hỏi bắt buộc</label>
                    </div>
                    <div id="options-${questionCount}" class="options-container" style="display: none;"></div>
                    <button type="button" class="btn btn-sm btn-outline-primary mt-2 btn-add-option"
                            onclick="addOption(${questionCount})" id="add-option-btn-${questionCount}" style="display: none;">
                        <i class="fas fa-plus"></i> Thêm lựa chọn
                    </button>
                    <span class="text-danger options-error"></span>
                </div>
            </div>`;

            container.insertAdjacentHTML('beforeend', html);
            updateQuestionIndexes();

            // Thêm sự kiện focus để kiểm tra câu hỏi trước đó
            const newQuestion = container.lastElementChild;
            const questionText = newQuestion.querySelector('.question-text');
            questionText.addEventListener('focus', function () {
                const questionItems = document.querySelectorAll('.question-item');
                const index = Array.from(questionItems).indexOf(newQuestion);
                if (index > 0) {
                    const prevQuestion = questionItems[index - 1];
                    if (!validateQuestion(prevQuestion)) {
                        validateQuestionText(prevQuestion); // Hiển thị lỗi
                        validateOptions(prevQuestion); // Hiển thị lỗi tùy chọn nếu có
                        // Không focus lại câu hỏi trước
                    }
                }
            });
            questionText.addEventListener('blur', function () {
                validateQuestionText(newQuestion);
            });
            questionText.addEventListener('input', function () {
                validateQuestionText(newQuestion); // Kiểm tra thời gian thực khi nhập
            });

            // Thêm sự kiện cho tùy chọn mới
            const optionInputs = newQuestion.querySelectorAll('.option-text');
            optionInputs.forEach(input => {
                input.addEventListener('input', function () {
                    validateOptions(newQuestion);
                });
            });
        }

        function addOption(qIndex) {
            const optionContainer = document.getElementById(`options-${qIndex}`);
            const count = optionContainer.querySelectorAll(".option-item").length;

            const html = `
            <div class="input-group mb-2 option-item">
                <input type="hidden" name="Questions[${qIndex}].Options[${count}].OptionId" value="0" />
                <input type="text" name="Questions[${qIndex}].Options[${count}].OptionText" class="form-control option-text" placeholder="Nhập tùy chọn..." />
                <button type="button" class="btn btn-outline-danger" onclick="removeOption(this)">
                    <i class="fas fa-times"></i>
                </button>
            </div>`;
            optionContainer.insertAdjacentHTML('beforeend', html);
            updateOptionIndexes(qIndex);

            // Thêm sự kiện input cho tùy chọn mới
            const newOption = optionContainer.lastElementChild.querySelector('.option-text');
            newOption.addEventListener('input', function () {
                const questionItem = this.closest('.question-item');
                validateOptions(questionItem);
            });
        }

        function removeQuestion(btn) {
            const questionItem = btn.closest('.question-item');
            questionItem.remove();
            updateQuestionIndexes();
        }

        function removeOption(btn) {
            const optItem = btn.closest('.option-item');
            const container = optItem.parentElement;
            optItem.remove();
            const qIndex = parseInt(container.id.split("-")[1]);
            updateOptionIndexes(qIndex);
        }

        function handleQuestionTypeChange(qIndex, select) {
            const selectedType = select.value;
            const optionsContainer = document.getElementById(`options-${qIndex}`);
            const addBtn = document.getElementById(`add-option-btn-${qIndex}`);

            if (selectedType === "Text") {
                optionsContainer.style.display = "none";
                if (addBtn) addBtn.style.display = "none";
            } else {
                optionsContainer.style.display = "block";
                if (addBtn) addBtn.style.display = "inline-block";
                if (optionsContainer.children.length === 0) {
                    addOption(qIndex);
                    addOption(qIndex); // Thêm 2 lựa chọn mặc định
                }
            }
        }

        const isPublicCheckbox = document.getElementById('isPublicCheckbox');
        const allowedUsersSection = document.getElementById('allowedUsersSection');

        function toggleAllowedUsers() {
            allowedUsersSection.style.display = isPublicCheckbox.checked ? "none" : "block";
            validateAllowedUsers(); // Kiểm tra lỗi khi toggle
        }

        isPublicCheckbox.addEventListener('change', toggleAllowedUsers);
        toggleAllowedUsers();
    </script>
    <style>
        .is-invalid {
            border-color: #dc3545 !important;
        }

        .text-danger {
            font-size: 0.875em;
        }
    </style>
}